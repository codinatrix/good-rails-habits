{"name":"Good-rails-habits","tagline":"Best practices in Rails that I need to learn to make into habits. Probably not useful to anyone who doesn't have the exact same habits as me.","body":"# Good Rails Habits\r\n\r\n## Use only one dot.\r\n\r\n`@invoice.customer.address` is bad. What if the app changes so that the customer has both a billing and a shipping address? Use the delegate method to wrap without clutter.\r\n\r\n_Ref: Rails AntiPatterns, P23_\r\n\r\n## A model shouldn't know the implementation details of another model.\r\n\r\n    class Pet < ActiveRecord::Base\r\n      has_many :toys\r\n\r\n      def find_cute_toys\r\n        self.toys.where(:cute => true)\r\n      end\r\n\r\nThis isn't good because Pet shouldn't know that Toy has a binary 'cute' column. This should be moved to the Toy model. (This actually needs a better example because the find_cute_toys method makes more sense to be on the Toy model as a scope, even without the implementation detail issue.)\r\n\r\n_Ref: Rails AntiPatterns, P52_\r\n\r\n## Don't forget that div_for is handy\r\n\r\nNo need to set custom id's when you can do `<%= div_for %>`\r\n\r\n## Don't forget to use an index to keep model data (such as emails or usernames) uniques\r\n    class AddIndexToUsersEmail < ActiveRecord::Migration\r\n      def change\r\n        add_index :users, :email, unique: true\r\n      end\r\n    end","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}